---
description: "Общие правила для всего проекта"
globs: ["**/*"]
alwaysApply: true

rules:
  - "Соблюдай Clean Architecture и не смешивай слои (UI, application, domain, infrastructure)."
  - "Перед созданием нового файла или метода всегда проверяй, есть ли уже готовый функционал в проекте. Если есть — переиспользуй."
  - "Не допускай дублирования кода и файлов. Если в проекте уже существует файл или метод с аналогичным функционалом, используй его вместо создания нового."
  - "Пиши модульный, переиспользуемый код. Избегай дублирования."
  - "Документируй публичные функции и методы на русском языке (docstring в Python, JSDoc в TypeScript)."
  - "Комментарии в коде также писать только на русском языке."
  - "Все новые API-клиенты на фронте генерируются из OpenAPI, руками не писать."
  - "Ошибки обрабатывай централизованно: middleware (backend) и error boundary (frontend)."
  - "Код пишется строго в TypeScript (frontend) и Python (backend), без примесей других языков."
  - "Не использовать магические числа и строки — выноси их в константы или конфиг."
  - "Соблюдай принцип единственной ответственности (SRP) для каждого класса/файла."
  - "Соблюдай DRY, KISS, SOLID."
---

---
description: "Frontend (React + TS) стилистика"
globs: ["src/**/*.{ts,tsx}"]
alwaysApply: true

rules:
  - "Используй Feature-Sliced Design (FSD): app, processes, pages, widgets, features, entities, shared."
  - "Все API-запросы размещай в features/[module]/api.ts."
  - "UI-компоненты общего назначения хранятся в shared/ui."
  - "Общие хуки — в shared/hooks."
  - "Пиши функциональные компоненты, а не классовые."
  - "Типизируй всё через TypeScript (Props, State, API DTO)."
  - "Для состояния используй React Query + Context API."
  - "Тесты компонентов — рядом с кодом (Component.test.tsx)."
  - "Форматирование строго через ESLint + Prettier."
  - "Все JSDoc-комментарии к функциям и методам писать на русском языке."
  - "Не допускай дублирующих компонентов или хуков с похожим функционалом."
---

---
description: "Backend (Django + DRF) стилистика"
globs: ["backend/**/*.py"]
alwaysApply: true

rules:
  - "Архитектура: apps (модели, сериалайзеры), services (бизнес-логика), api (контроллеры)."
  - "Бизнес-логику выноси в services, не пиши её в контроллерах."
  - "DTO (serializers) не смешивай с моделями."
  - "Celery задачи хранятся только в services."
  - "WebSocket логика — только в api/consumers."
  - "Форматирование строго через Black + isort + mypy."
  - "Пиши docstring ко всем публичным методам и классам на русском языке."
  - "Комментарии внутри функций также должны быть на русском языке."
  - "Юнит-тесты — pytest + pytest-django, файлы тестов в backend/tests."
  - "Не допускай дублирующих сервисов, моделей или сериалайзеров с одинаковым функционалом."
---

---
description: "Инфраструктура"
globs: ["infra/**/*", "docker-compose.yml"]
alwaysApply: true

rules:
  - "Dockerfile и compose должны быть минимальными и чистыми."
  - "Не хранить секреты в коде — использовать .env + python-decouple."
  - "CI/CD пайплайн: линтеры → тесты → билд → деплой."
  - "Все окружения (dev, prod) должны запускаться через Docker."
  - "После изменения API — перегенерировать фронтенд SDK из OpenAPI."
  - "Не создавать дублирующие docker-файлы или конфиги с одинаковым назначением."
---
