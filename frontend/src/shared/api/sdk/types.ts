/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Кастомный JWT токен view, возвращающий данные пользователя с токенами */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Просмотр и обновление профиля пользователя */
        get: operations["auth_me_retrieve"];
        /** @description Просмотр и обновление профиля пользователя */
        put: operations["auth_me_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Просмотр и обновление профиля пользователя */
        patch: operations["auth_me_partial_update"];
        trace?: never;
    };
    "/api/auth/me/password/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Смена пароля пользователя */
        patch: operations["auth_me_password_partial_update"];
        trace?: never;
    };
    "/api/auth/password-reset/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Запрос на сброс пароля */
        post: operations["auth_password_reset_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/password-reset/confirm/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Сброс пароля по токену */
        post: operations["auth_password_reset_confirm_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Регистрация нового пользователя */
        post: operations["auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["auth_token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Поиск пользователей для добавления в workspace */
        get: operations["auth_users_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["comments_list"];
        put?: never;
        post: operations["comments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["comments_retrieve"];
        /** @description Обновление комментария */
        put: operations["comments_update"];
        post?: never;
        /** @description Удаление комментария */
        delete: operations["comments_destroy"];
        options?: never;
        head?: never;
        patch: operations["comments_partial_update"];
        trace?: never;
    };
    "/api/databases/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["databases_list"];
        put?: never;
        post: operations["databases_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["databases_retrieve"];
        put: operations["databases_update"];
        post?: never;
        delete: operations["databases_destroy"];
        options?: never;
        head?: never;
        patch: operations["databases_partial_update"];
        trace?: never;
    };
    "/api/databases/{id}/create_property/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["databases_create_property_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/create_record/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["databases_create_record_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/create_view/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["databases_create_view_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/properties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["databases_properties_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/records/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["databases_records_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/databases/{id}/views/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["databases_views_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/blocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для блоков */
        get: operations["notes_blocks_list"];
        put?: never;
        /** @description ViewSet для блоков */
        post: operations["notes_blocks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/blocks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для блоков */
        get: operations["notes_blocks_retrieve"];
        /** @description ViewSet для блоков */
        put: operations["notes_blocks_update"];
        post?: never;
        /** @description ViewSet для блоков */
        delete: operations["notes_blocks_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для блоков */
        patch: operations["notes_blocks_partial_update"];
        trace?: never;
    };
    "/api/notes/pages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для страниц */
        get: operations["notes_pages_list"];
        put?: never;
        /** @description ViewSet для страниц */
        post: operations["notes_pages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/pages/{page_id}/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View для списка и создания комментариев к странице */
        get: operations["notes_pages_comments_list"];
        put?: never;
        /** @description View для списка и создания комментариев к странице */
        post: operations["notes_pages_comments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/pages/{page_id}/comments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description View для получения, обновления и удаления комментария */
        get: operations["notes_pages_comments_retrieve"];
        /** @description View для получения, обновления и удаления комментария */
        put: operations["notes_pages_comments_update"];
        post?: never;
        /** @description View для получения, обновления и удаления комментария */
        delete: operations["notes_pages_comments_destroy"];
        options?: never;
        head?: never;
        /** @description View для получения, обновления и удаления комментария */
        patch: operations["notes_pages_comments_partial_update"];
        trace?: never;
    };
    "/api/notes/pages/{page_id}/comments/{id}/resolve/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description View для разрешения комментария */
        put: operations["notes_pages_comments_resolve_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description View для разрешения комментария */
        patch: operations["notes_pages_comments_resolve_partial_update"];
        trace?: never;
    };
    "/api/notes/pages/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для страниц */
        get: operations["notes_pages_retrieve"];
        /** @description ViewSet для страниц */
        put: operations["notes_pages_update"];
        post?: never;
        /** @description ViewSet для страниц */
        delete: operations["notes_pages_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для страниц */
        patch: operations["notes_pages_partial_update"];
        trace?: never;
    };
    "/api/notes/pages/{id}/blocks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение и создание блоков страницы */
        get: operations["notes_pages_blocks_retrieve"];
        put?: never;
        /** @description Получение и создание блоков страницы */
        post: operations["notes_pages_blocks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для тегов */
        get: operations["notes_tags_list"];
        put?: never;
        /** @description ViewSet для тегов */
        post: operations["notes_tags_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notes/tags/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для тегов */
        get: operations["notes_tags_retrieve"];
        /** @description ViewSet для тегов */
        put: operations["notes_tags_update"];
        post?: never;
        /** @description ViewSet для тегов */
        delete: operations["notes_tags_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для тегов */
        patch: operations["notes_tags_partial_update"];
        trace?: never;
    };
    "/api/notifications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для уведомлений */
        get: operations["notifications_list"];
        put?: never;
        /** @description ViewSet для уведомлений */
        post: operations["notifications_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для уведомлений */
        get: operations["notifications_retrieve"];
        /** @description ViewSet для уведомлений */
        put: operations["notifications_update"];
        post?: never;
        /** @description ViewSet для уведомлений */
        delete: operations["notifications_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для уведомлений */
        patch: operations["notifications_partial_update"];
        trace?: never;
    };
    "/api/notifications/mark_all_read/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Отметить все уведомления как прочитанные */
        post: operations["notifications_mark_all_read_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/reminders/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для напоминаний */
        get: operations["notifications_reminders_list"];
        put?: never;
        /** @description ViewSet для напоминаний */
        post: operations["notifications_reminders_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/reminders/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для напоминаний */
        get: operations["notifications_reminders_retrieve"];
        /** @description ViewSet для напоминаний */
        put: operations["notifications_reminders_update"];
        post?: never;
        /** @description ViewSet для напоминаний */
        delete: operations["notifications_reminders_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для напоминаний */
        patch: operations["notifications_reminders_partial_update"];
        trace?: never;
    };
    "/api/notifications/settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Переопределяем list для возврата одного объекта без пагинации */
        get: operations["notifications_settings_list"];
        put?: never;
        /** @description ViewSet для настроек уведомлений */
        post: operations["notifications_settings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/settings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для настроек уведомлений */
        get: operations["notifications_settings_retrieve"];
        /** @description ViewSet для настроек уведомлений */
        put: operations["notifications_settings_update"];
        post?: never;
        /** @description ViewSet для настроек уведомлений */
        delete: operations["notifications_settings_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для настроек уведомлений */
        patch: operations["notifications_settings_partial_update"];
        trace?: never;
    };
    "/api/search/autocomplete/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Автодополнение поиска */
        get: operations["search_autocomplete_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/global/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Глобальный поиск по всем workspace */
        get: operations["search_global_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/history/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для истории поиска */
        get: operations["search_history_list"];
        put?: never;
        /** @description ViewSet для истории поиска */
        post: operations["search_history_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/history/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для истории поиска */
        get: operations["search_history_retrieve"];
        /** @description ViewSet для истории поиска */
        put: operations["search_history_update"];
        post?: never;
        /** @description ViewSet для истории поиска */
        delete: operations["search_history_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для истории поиска */
        patch: operations["search_history_partial_update"];
        trace?: never;
    };
    "/api/search/history/clear/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Очистка истории поиска */
        delete: operations["search_history_clear_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/saved/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для сохраненных поисков */
        get: operations["search_saved_list"];
        put?: never;
        /** @description ViewSet для сохраненных поисков */
        post: operations["search_saved_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/saved/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для сохраненных поисков */
        get: operations["search_saved_retrieve"];
        /** @description ViewSet для сохраненных поисков */
        put: operations["search_saved_update"];
        post?: never;
        /** @description ViewSet для сохраненных поисков */
        delete: operations["search_saved_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для сохраненных поисков */
        patch: operations["search_saved_partial_update"];
        trace?: never;
    };
    "/api/search/saved/{id}/execute/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Выполнение сохраненного поиска */
        post: operations["search_saved_execute_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/search/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Основной поиск */
        post: operations["search_search_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/search/workspace/{workspace_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Поиск в конкретном workspace */
        get: operations["search_workspace_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/taskboards/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для досок задач */
        get: operations["taskboards_list"];
        put?: never;
        /** @description ViewSet для досок задач */
        post: operations["taskboards_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/taskboards/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для досок задач */
        get: operations["taskboards_retrieve"];
        /** @description ViewSet для досок задач */
        put: operations["taskboards_update"];
        post?: never;
        /** @description ViewSet для досок задач */
        delete: operations["taskboards_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для досок задач */
        patch: operations["taskboards_partial_update"];
        trace?: never;
    };
    "/api/taskboards/{id}/columns/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Управление колонками доски */
        get: operations["taskboards_columns_retrieve"];
        put?: never;
        /** @description Управление колонками доски */
        post: operations["taskboards_columns_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/taskboards/{id}/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Управление задачами доски */
        get: operations["taskboards_tasks_retrieve"];
        put?: never;
        /** @description Управление задачами доски */
        post: operations["taskboards_tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для задач */
        get: operations["tasks_list"];
        put?: never;
        /** @description ViewSet для задач */
        post: operations["tasks_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для задач */
        get: operations["tasks_retrieve"];
        /** @description ViewSet для задач */
        put: operations["tasks_update"];
        post?: never;
        /** @description ViewSet для задач */
        delete: operations["tasks_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для задач */
        patch: operations["tasks_partial_update"];
        trace?: never;
    };
    "/api/tasks/{id}/activity/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение активности задачи */
        get: operations["tasks_activity_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Управление комментариями к задаче */
        get: operations["tasks_comments_retrieve"];
        put?: never;
        /** @description Управление комментариями к задаче */
        post: operations["tasks_comments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}/move/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Перемещение задачи в другую колонку */
        patch: operations["tasks_move_partial_update"];
        trace?: never;
    };
    "/api/workspaces/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для рабочих пространств */
        get: operations["workspaces_list"];
        put?: never;
        /** @description ViewSet для рабочих пространств */
        post: operations["workspaces_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для рабочих пространств */
        get: operations["workspaces_retrieve"];
        /** @description ViewSet для рабочих пространств */
        put: operations["workspaces_update"];
        post?: never;
        /** @description ViewSet для рабочих пространств */
        delete: operations["workspaces_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для рабочих пространств */
        patch: operations["workspaces_partial_update"];
        trace?: never;
    };
    "/api/workspaces/{id}/database_stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение статистики баз данных в рабочем пространстве */
        get: operations["workspaces_database_stats_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/invite/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Приглашение пользователя в рабочее пространство */
        post: operations["workspaces_invite_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/members/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение участников рабочего пространства */
        get: operations["workspaces_members_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/members/{member_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Удаление участника из рабочего пространства */
        delete: operations["workspaces_members_destroy"];
        options?: never;
        head?: never;
        /** @description Обновление роли участника рабочего пространства */
        patch: operations["workspaces_members_partial_update"];
        trace?: never;
    };
    "/api/workspaces/{id}/members/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение информации о текущем участнике */
        get: operations["workspaces_members_me_retrieve"];
        put?: never;
        post?: never;
        /** @description Выход из рабочего пространства */
        delete: operations["workspaces_members_me_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/task_stats/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение статистики задач в рабочем пространстве */
        get: operations["workspaces_task_stats_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/{id}/workspace_settings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение и обновление настроек рабочего пространства */
        get: operations["workspaces_workspace_settings_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Получение и обновление настроек рабочего пространства */
        patch: operations["workspaces_workspace_settings_partial_update"];
        trace?: never;
    };
    "/api/workspaces/analytics/overview/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Общий обзор аналитики workspace */
        get: operations["workspaces_analytics_overview_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/invitations/{id}/accept/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Принятие приглашения по ID */
        post: operations["workspaces_invitations_accept_create_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/invitations/{id}/decline/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Отклонение приглашения по ID */
        post: operations["workspaces_invitations_decline_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/invitations/accept/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Принятие приглашения по токену */
        post: operations["workspaces_invitations_accept_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workspaces/invitations/pending/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Получение ожидающих приглашений пользователя */
        get: operations["workspaces_invitations_pending_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Block: {
            /** Format: uuid */
            readonly id: string;
            type?: components["schemas"]["BlockTypeEnum"];
            content?: {
                [key: string]: unknown;
            };
            /** Format: double */
            position?: number;
            /** Format: uuid */
            parent_block?: string | null;
            readonly children: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `text` - Text
         *     * `heading1` - Heading 1
         *     * `heading2` - Heading 2
         *     * `heading3` - Heading 3
         *     * `bulleted_list` - Bulleted List
         *     * `numbered_list` - Numbered List
         *     * `todo` - To-Do
         *     * `toggle` - Toggle
         *     * `quote` - Quote
         *     * `divider` - Divider
         *     * `callout` - Callout
         *     * `code` - Code
         *     * `image` - Image
         *     * `video` - Video
         *     * `file` - File
         *     * `embed` - Embed
         *     * `bookmark` - Bookmark
         *     * `table` - Table
         *     * `database` - Database
         *     * `equation` - Equation
         * @enum {string}
         */
        BlockTypeEnum: "text" | "heading1" | "heading2" | "heading3" | "bulleted_list" | "numbered_list" | "todo" | "toggle" | "quote" | "divider" | "callout" | "code" | "image" | "video" | "file" | "embed" | "bookmark" | "table" | "database" | "equation";
        Comment: {
            readonly id: number;
            content: string;
            readonly author: number;
            readonly author_name: string;
            readonly author_avatar: string;
            parent?: number | null;
            /** Format: uuid */
            block?: string | null;
            is_resolved?: boolean;
            readonly replies: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Сериализатор для комментариев к записям */
        DatabaseComment: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            record: string;
            readonly author: number;
            readonly author_name: string;
            content: string;
            /** Format: uuid */
            parent_comment?: string | null;
            readonly replies: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        DatabaseDetail: {
            /** Format: uuid */
            readonly id: string;
            title: string;
            description?: string;
            icon?: string;
            workspace: number;
            readonly workspace_name: string;
            default_view?: components["schemas"]["DefaultViewEnum"];
            readonly created_by: number;
            readonly created_by_name: string;
            readonly properties: components["schemas"]["DatabaseProperty"][];
            readonly properties_count: string;
            readonly records_count: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        DatabaseProperty: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            type: components["schemas"]["DatabasePropertyTypeEnum"];
            config?: {
                [key: string]: unknown;
            };
            /** Format: double */
            position?: number;
            is_visible?: boolean;
            readonly options: components["schemas"]["SelectOption"][];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `text` - Text
         *     * `number` - Number
         *     * `select` - Select
         *     * `multi_select` - Multi-select
         *     * `date` - Date
         *     * `person` - Person
         *     * `files` - Files & media
         *     * `checkbox` - Checkbox
         *     * `url` - URL
         *     * `email` - Email
         *     * `phone` - Phone number
         *     * `formula` - Formula
         *     * `relation` - Relation
         *     * `rollup` - Rollup
         *     * `created_time` - Created time
         *     * `created_by` - Created by
         *     * `last_edited_time` - Last edited time
         *     * `last_edited_by` - Last edited by
         * @enum {string}
         */
        DatabasePropertyTypeEnum: "text" | "number" | "select" | "multi_select" | "date" | "person" | "files" | "checkbox" | "url" | "email" | "phone" | "formula" | "relation" | "rollup" | "created_time" | "created_by" | "last_edited_time" | "last_edited_by";
        /**
         * @description * `private` - Private
         *     * `workspace` - Workspace
         *     * `public` - Public
         * @enum {string}
         */
        DefaultPagePermissionsEnum: "private" | "workspace" | "public";
        /**
         * @description * `table` - Table
         *     * `board` - Board
         *     * `list` - List
         *     * `calendar` - Calendar
         *     * `gallery` - Gallery
         *     * `timeline` - Timeline
         * @enum {string}
         */
        DefaultViewEnum: "table" | "board" | "list" | "calendar" | "gallery" | "timeline";
        Notification: {
            /** Format: uuid */
            readonly id: string;
            type: components["schemas"]["NotificationTypeEnum"];
            title: string;
            message: string;
            readonly sender: number | null;
            readonly sender_name: string;
            readonly sender_avatar: string;
            content_type?: number | null;
            object_id?: string | null;
            readonly content_object_data: string;
            metadata?: {
                [key: string]: unknown;
            };
            is_read?: boolean;
            is_email_sent?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly read_at: string | null;
        };
        NotificationSettings: {
            readonly id: number;
            email_on_comment?: boolean;
            email_on_mention?: boolean;
            email_on_page_share?: boolean;
            email_on_task_assigned?: boolean;
            email_on_task_due?: boolean;
            email_on_workspace_invite?: boolean;
            push_on_comment?: boolean;
            push_on_mention?: boolean;
            push_on_page_share?: boolean;
            push_on_task_assigned?: boolean;
            push_on_task_due?: boolean;
            push_on_workspace_invite?: boolean;
            daily_digest?: boolean;
            weekly_digest?: boolean;
        };
        /**
         * @description * `comment` - Comment
         *     * `mention` - Mention
         *     * `page_shared` - Page Shared
         *     * `task_assigned` - Task Assigned
         *     * `task_due` - Task Due
         *     * `workspace_invite` - Workspace Invite
         *     * `database_updated` - Database Updated
         *     * `reminder` - Reminder
         * @enum {string}
         */
        NotificationTypeEnum: "comment" | "mention" | "page_shared" | "task_assigned" | "task_due" | "workspace_invite" | "database_updated" | "reminder";
        PageCreate: {
            title?: string;
            content?: {
                [key: string]: unknown;
            };
            icon?: string;
            /** Format: uri */
            cover_image?: string | null;
            workspace: number;
            /** Format: uuid */
            parent?: string | null;
            tag_ids?: number[];
            permissions?: components["schemas"]["PermissionsEnum"];
            is_template?: boolean;
            /** Format: double */
            position?: number;
        };
        PageDetail: {
            /** Format: uuid */
            readonly id: string;
            title?: string;
            content?: {
                [key: string]: unknown;
            };
            content_text?: string;
            icon?: string;
            /** Format: uri */
            cover_image?: string | null;
            readonly workspace: string;
            /** Format: uuid */
            parent?: string | null;
            readonly author: string;
            readonly last_edited_by: string;
            readonly tags: components["schemas"]["Tag"][];
            tag_ids?: number[];
            permissions?: components["schemas"]["PermissionsEnum"];
            is_template?: boolean;
            is_archived?: boolean;
            /** Format: double */
            position?: number;
            readonly blocks: components["schemas"]["Block"][];
            readonly children: components["schemas"]["PageList"][];
            readonly path: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        PageList: {
            /** Format: uuid */
            readonly id: string;
            title?: string;
            icon?: string;
            /** Format: uri */
            cover_image?: string | null;
            workspace: number;
            readonly workspace_name: string;
            /** Format: uuid */
            parent?: string | null;
            author: number;
            readonly author_name: string;
            last_edited_by: number;
            readonly last_edited_by_name: string;
            readonly tags: components["schemas"]["Tag"][];
            permissions?: components["schemas"]["PermissionsEnum"];
            is_template?: boolean;
            is_archived?: boolean;
            is_deleted?: boolean;
            readonly children_count: string;
            readonly path: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        PaginatedBlockList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Block"][];
        };
        PaginatedCommentList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Comment"][];
        };
        PaginatedDatabaseCommentList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["DatabaseComment"][];
        };
        PaginatedDatabaseDetailList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["DatabaseDetail"][];
        };
        PaginatedNotificationList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Notification"][];
        };
        PaginatedNotificationSettingsList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["NotificationSettings"][];
        };
        PaginatedPageListList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["PageList"][];
        };
        PaginatedReminderList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Reminder"][];
        };
        PaginatedSavedSearchList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["SavedSearch"][];
        };
        PaginatedSearchHistoryList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["SearchHistory"][];
        };
        PaginatedTagList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Tag"][];
        };
        PaginatedTaskBoardList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["TaskBoard"][];
        };
        PaginatedTaskList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Task"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["User"][];
        };
        PaginatedWorkspaceList: {
            /** @example 123 */
            count?: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results?: components["schemas"]["Workspace"][];
        };
        PatchedBlock: {
            /** Format: uuid */
            readonly id?: string;
            type?: components["schemas"]["BlockTypeEnum"];
            content?: {
                [key: string]: unknown;
            };
            /** Format: double */
            position?: number;
            /** Format: uuid */
            parent_block?: string | null;
            readonly children?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedComment: {
            readonly id?: number;
            content?: string;
            readonly author?: number;
            readonly author_name?: string;
            readonly author_avatar?: string;
            parent?: number | null;
            /** Format: uuid */
            block?: string | null;
            is_resolved?: boolean;
            readonly replies?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Сериализатор для комментариев к записям */
        PatchedDatabaseComment: {
            /** Format: uuid */
            readonly id?: string;
            /** Format: uuid */
            record?: string;
            readonly author?: number;
            readonly author_name?: string;
            content?: string;
            /** Format: uuid */
            parent_comment?: string | null;
            readonly replies?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedDatabaseDetail: {
            /** Format: uuid */
            readonly id?: string;
            title?: string;
            description?: string;
            icon?: string;
            workspace?: number;
            readonly workspace_name?: string;
            default_view?: components["schemas"]["DefaultViewEnum"];
            readonly created_by?: number;
            readonly created_by_name?: string;
            readonly properties?: components["schemas"]["DatabaseProperty"][];
            readonly properties_count?: string;
            readonly records_count?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedNotification: {
            /** Format: uuid */
            readonly id?: string;
            type?: components["schemas"]["NotificationTypeEnum"];
            title?: string;
            message?: string;
            readonly sender?: number | null;
            readonly sender_name?: string;
            readonly sender_avatar?: string;
            content_type?: number | null;
            object_id?: string | null;
            readonly content_object_data?: string;
            metadata?: {
                [key: string]: unknown;
            };
            is_read?: boolean;
            is_email_sent?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly read_at?: string | null;
        };
        PatchedNotificationSettings: {
            readonly id?: number;
            email_on_comment?: boolean;
            email_on_mention?: boolean;
            email_on_page_share?: boolean;
            email_on_task_assigned?: boolean;
            email_on_task_due?: boolean;
            email_on_workspace_invite?: boolean;
            push_on_comment?: boolean;
            push_on_mention?: boolean;
            push_on_page_share?: boolean;
            push_on_task_assigned?: boolean;
            push_on_task_due?: boolean;
            push_on_workspace_invite?: boolean;
            daily_digest?: boolean;
            weekly_digest?: boolean;
        };
        PatchedPageDetail: {
            /** Format: uuid */
            readonly id?: string;
            title?: string;
            content?: {
                [key: string]: unknown;
            };
            content_text?: string;
            icon?: string;
            /** Format: uri */
            cover_image?: string | null;
            readonly workspace?: string;
            /** Format: uuid */
            parent?: string | null;
            readonly author?: string;
            readonly last_edited_by?: string;
            readonly tags?: components["schemas"]["Tag"][];
            tag_ids?: number[];
            permissions?: components["schemas"]["PermissionsEnum"];
            is_template?: boolean;
            is_archived?: boolean;
            /** Format: double */
            position?: number;
            readonly blocks?: components["schemas"]["Block"][];
            readonly children?: components["schemas"]["PageList"][];
            readonly path?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedReminder: {
            /** Format: uuid */
            readonly id?: string;
            type?: components["schemas"]["ReminderTypeEnum"];
            title?: string;
            message?: string;
            content_type?: number | null;
            object_id?: string | null;
            readonly content_object_data?: string;
            /** Format: date-time */
            remind_at?: string;
            readonly is_sent?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly sent_at?: string | null;
        };
        PatchedSavedSearch: {
            /** Format: uuid */
            readonly id?: string;
            name?: string;
            query?: string;
            filters?: {
                [key: string]: unknown;
            };
            search_type?: components["schemas"]["SearchTypeEnum"];
            is_public?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedSearchHistory: {
            /** Format: uuid */
            readonly id?: string;
            query?: string;
            search_type?: components["schemas"]["SearchTypeEnum"];
            results_count?: number;
            /** Format: date-time */
            readonly created_at?: string;
        };
        PatchedTag: {
            readonly id?: number;
            name?: string;
            color?: string;
            /** Format: date-time */
            readonly created_at?: string;
        };
        /** @description Сериалайзер для задач */
        PatchedTask: {
            /** Format: uuid */
            readonly id?: string;
            title?: string;
            description?: string;
            /** Format: uuid */
            readonly board?: string;
            readonly board_title?: string;
            /** Format: uuid */
            readonly column?: string;
            readonly column_title?: string;
            /** Format: double */
            readonly position?: number;
            priority?: components["schemas"]["PriorityEnum"];
            status?: components["schemas"]["StatusEnum"];
            readonly created_by?: number;
            readonly created_by_name?: string;
            /** Format: date-time */
            due_date?: string | null;
            /** Format: date-time */
            start_date?: string | null;
            /** Format: date-time */
            readonly completed_at?: string | null;
            /** Format: decimal */
            estimated_hours?: string | null;
            readonly tags?: string[];
            tag_ids?: number[];
            readonly comments_count?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Сериалайзер для доски задач */
        PatchedTaskBoard: {
            /** Format: uuid */
            readonly id?: string;
            title?: string;
            description?: string;
            workspace?: number;
            readonly workspace_name?: string;
            readonly created_by?: number;
            readonly created_by_name?: string;
            readonly tasks_count?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        PatchedUserUpdate: {
            first_name?: string;
            last_name?: string;
            /** Format: uri */
            avatar?: string | null;
            bio?: string;
            timezone?: string;
            theme_preference?: components["schemas"]["ThemePreferenceEnum"];
            profile?: components["schemas"]["UserProfile"];
        };
        /** @description Сериалайзер для рабочих пространств */
        PatchedWorkspace: {
            readonly id?: number;
            name?: string;
            description?: string;
            icon?: string;
            color?: string;
            readonly owner?: string;
            readonly owner_id?: number;
            is_personal?: boolean;
            readonly members_count?: string;
            readonly member_role?: string;
            readonly settings?: components["schemas"]["WorkspaceSettings"];
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /**
         * @description * `private` - Private
         *     * `workspace` - Workspace
         *     * `public` - Public
         * @enum {string}
         */
        PermissionsEnum: "private" | "workspace" | "public";
        /**
         * @description * `low` - Low
         *     * `medium` - Medium
         *     * `high` - High
         *     * `urgent` - Urgent
         * @enum {string}
         */
        PriorityEnum: "low" | "medium" | "high" | "urgent";
        Reminder: {
            /** Format: uuid */
            readonly id: string;
            type: components["schemas"]["ReminderTypeEnum"];
            title: string;
            message?: string;
            content_type?: number | null;
            object_id?: string | null;
            readonly content_object_data: string;
            /** Format: date-time */
            remind_at: string;
            readonly is_sent: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly sent_at: string | null;
        };
        /**
         * @description * `page` - Page
         *     * `task` - Task
         *     * `custom` - Custom
         * @enum {string}
         */
        ReminderTypeEnum: "page" | "task" | "custom";
        /**
         * @description * `viewer` - Viewer
         *     * `editor` - Editor
         *     * `admin` - Admin
         *     * `owner` - Owner
         * @enum {string}
         */
        RoleEnum: "viewer" | "editor" | "admin" | "owner";
        SavedSearch: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            query: string;
            filters?: {
                [key: string]: unknown;
            };
            search_type?: components["schemas"]["SearchTypeEnum"];
            is_public?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        SearchHistory: {
            /** Format: uuid */
            readonly id: string;
            query: string;
            search_type?: components["schemas"]["SearchTypeEnum"];
            results_count?: number;
            /** Format: date-time */
            readonly created_at: string;
        };
        /**
         * @description * `all` - All Content
         *     * `pages` - Pages
         *     * `tasks` - Tasks
         *     * `databases` - Databases
         *     * `users` - Users
         * @enum {string}
         */
        SearchTypeEnum: "all" | "pages" | "tasks" | "databases" | "users";
        SelectOption: {
            readonly id: number;
            name: string;
            color?: string;
            /** Format: double */
            position?: number;
        };
        /**
         * @description * `todo` - To Do
         *     * `in_progress` - In Progress
         *     * `review` - Review
         *     * `done` - Done
         * @enum {string}
         */
        StatusEnum: "todo" | "in_progress" | "review" | "done";
        Tag: {
            readonly id: number;
            name: string;
            color?: string;
            /** Format: date-time */
            readonly created_at: string;
        };
        /** @description Сериалайзер для задач */
        Task: {
            /** Format: uuid */
            readonly id: string;
            title: string;
            description?: string;
            /** Format: uuid */
            readonly board: string;
            readonly board_title: string;
            /** Format: uuid */
            readonly column: string;
            readonly column_title: string;
            /** Format: double */
            readonly position: number;
            priority?: components["schemas"]["PriorityEnum"];
            status?: components["schemas"]["StatusEnum"];
            readonly created_by: number;
            readonly created_by_name: string;
            /** Format: date-time */
            due_date?: string | null;
            /** Format: date-time */
            start_date?: string | null;
            /** Format: date-time */
            readonly completed_at: string | null;
            /** Format: decimal */
            estimated_hours?: string | null;
            readonly tags: string[];
            tag_ids?: number[];
            readonly comments_count: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Сериалайзер для доски задач */
        TaskBoard: {
            /** Format: uuid */
            readonly id: string;
            title: string;
            description?: string;
            workspace: number;
            readonly workspace_name: string;
            readonly created_by: number;
            readonly created_by_name: string;
            readonly tasks_count: string;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `light` - Light
         *     * `dark` - Dark
         *     * `auto` - Auto
         * @enum {string}
         */
        ThemePreferenceEnum: "light" | "dark" | "auto";
        TokenObtainPair: {
            email: string;
            password: string;
            readonly access: string;
            readonly refresh: string;
        };
        TokenRefresh: {
            readonly access: string;
            refresh: string;
        };
        User: {
            readonly id: number;
            /** Format: email */
            readonly email: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name: string;
            last_name: string;
            readonly full_name: string;
            /** Format: uri */
            avatar?: string | null;
            bio?: string;
            timezone?: string;
            theme_preference?: components["schemas"]["ThemePreferenceEnum"];
            readonly is_email_verified: boolean;
            readonly profile: components["schemas"]["UserProfile"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        UserProfile: {
            phone?: string;
            company?: string;
            job_title?: string;
            /** Format: uri */
            website?: string;
            notification_preferences?: {
                [key: string]: unknown;
            };
        };
        UserRegistration: {
            /** Format: email */
            email: string;
            /** @description Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only. */
            username: string;
            first_name: string;
            last_name: string;
            password: string;
            password_confirm: string;
        };
        UserUpdate: {
            first_name: string;
            last_name: string;
            /** Format: uri */
            avatar?: string | null;
            bio?: string;
            timezone?: string;
            theme_preference?: components["schemas"]["ThemePreferenceEnum"];
            profile: components["schemas"]["UserProfile"];
        };
        /** @description Сериалайзер для рабочих пространств */
        Workspace: {
            readonly id: number;
            name: string;
            description?: string;
            icon?: string;
            color?: string;
            readonly owner: string;
            readonly owner_id: number;
            is_personal?: boolean;
            readonly members_count: string;
            readonly member_role: string;
            readonly settings: components["schemas"]["WorkspaceSettings"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /** @description Сериалайзер для рабочих пространств */
        WorkspaceDetail: {
            readonly id: number;
            name: string;
            description?: string;
            icon?: string;
            color?: string;
            readonly owner: string;
            readonly owner_id: number;
            is_personal?: boolean;
            readonly members_count: string;
            readonly member_role: string;
            readonly settings: components["schemas"]["WorkspaceSettings"];
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
            readonly members: components["schemas"]["WorkspaceMember"][];
        };
        /** @description Сериалайзер для участников рабочего пространства */
        WorkspaceMember: {
            readonly id: number;
            user: number;
            readonly user_id: string;
            readonly user_email: string;
            readonly user_name: string;
            role?: components["schemas"]["RoleEnum"];
            /** Format: date-time */
            readonly joined_at: string;
        };
        /** @description Сериалайзер для настроек рабочего пространства */
        WorkspaceSettings: {
            allow_member_invites?: boolean;
            allow_public_pages?: boolean;
            default_page_permissions?: components["schemas"]["DefaultPagePermissionsEnum"];
            enable_comments?: boolean;
            enable_page_history?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPair"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPair"];
                "multipart/form-data": components["schemas"]["TokenObtainPair"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    auth_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    auth_me_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["UserUpdate"];
                "multipart/form-data": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
        };
    };
    auth_me_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserUpdate"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserUpdate"];
                "multipart/form-data": components["schemas"]["PatchedUserUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
        };
    };
    auth_me_password_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_password_reset_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_password_reset_confirm_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRegistration"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRegistration"];
                "multipart/form-data": components["schemas"]["UserRegistration"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRegistration"];
                };
            };
        };
    };
    auth_token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefresh"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
                "multipart/form-data": components["schemas"]["TokenRefresh"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    auth_users_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    comments_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDatabaseCommentList"];
                };
            };
        };
    };
    comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseComment"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseComment"];
                "multipart/form-data": components["schemas"]["DatabaseComment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseComment"];
                };
            };
        };
    };
    comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseComment"];
                };
            };
        };
    };
    comments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseComment"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseComment"];
                "multipart/form-data": components["schemas"]["DatabaseComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseComment"];
                };
            };
        };
    };
    comments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    comments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDatabaseComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDatabaseComment"];
                "multipart/form-data": components["schemas"]["PatchedDatabaseComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseComment"];
                };
            };
        };
    };
    databases_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDatabaseDetailList"];
                };
            };
        };
    };
    databases_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseDetail"];
                "multipart/form-data": components["schemas"]["DatabaseDetail"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseDetail"];
                "multipart/form-data": components["schemas"]["DatabaseDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    databases_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedDatabaseDetail"];
                "multipart/form-data": components["schemas"]["PatchedDatabaseDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_create_property_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseDetail"];
                "multipart/form-data": components["schemas"]["DatabaseDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_create_record_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseDetail"];
                "multipart/form-data": components["schemas"]["DatabaseDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_create_view_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatabaseDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["DatabaseDetail"];
                "multipart/form-data": components["schemas"]["DatabaseDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_properties_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_records_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    databases_views_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatabaseDetail"];
                };
            };
        };
    };
    notes_blocks_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBlockList"];
                };
            };
        };
    };
    notes_blocks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Block"];
                "application/x-www-form-urlencoded": components["schemas"]["Block"];
                "multipart/form-data": components["schemas"]["Block"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"];
                };
            };
        };
    };
    notes_blocks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"];
                };
            };
        };
    };
    notes_blocks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Block"];
                "application/x-www-form-urlencoded": components["schemas"]["Block"];
                "multipart/form-data": components["schemas"]["Block"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"];
                };
            };
        };
    };
    notes_blocks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_blocks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBlock"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBlock"];
                "multipart/form-data": components["schemas"]["PatchedBlock"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Block"];
                };
            };
        };
    };
    notes_pages_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPageListList"];
                };
            };
        };
    };
    notes_pages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageCreate"];
                "application/x-www-form-urlencoded": components["schemas"]["PageCreate"];
                "multipart/form-data": components["schemas"]["PageCreate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageCreate"];
                };
            };
        };
    };
    notes_pages_comments_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path: {
                page_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCommentList"];
                };
            };
        };
    };
    notes_pages_comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                page_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_comments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_comments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_pages_comments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComment"];
                "multipart/form-data": components["schemas"]["PatchedComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_comments_resolve_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Comment"];
                "application/x-www-form-urlencoded": components["schemas"]["Comment"];
                "multipart/form-data": components["schemas"]["Comment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_comments_resolve_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                page_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedComment"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedComment"];
                "multipart/form-data": components["schemas"]["PatchedComment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Comment"];
                };
            };
        };
    };
    notes_pages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    notes_pages_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PageDetail"];
                "multipart/form-data": components["schemas"]["PageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    notes_pages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_pages_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPageDetail"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPageDetail"];
                "multipart/form-data": components["schemas"]["PatchedPageDetail"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetail"];
                };
            };
        };
    };
    notes_pages_blocks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageList"];
                };
            };
        };
    };
    notes_pages_blocks_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PageList"];
                "application/x-www-form-urlencoded": components["schemas"]["PageList"];
                "multipart/form-data": components["schemas"]["PageList"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageList"];
                };
            };
        };
    };
    notes_tags_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTagList"];
                };
            };
        };
    };
    notes_tags_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tag"];
                "application/x-www-form-urlencoded": components["schemas"]["Tag"];
                "multipart/form-data": components["schemas"]["Tag"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    notes_tags_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    notes_tags_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Tag"];
                "application/x-www-form-urlencoded": components["schemas"]["Tag"];
                "multipart/form-data": components["schemas"]["Tag"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    notes_tags_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notes_tags_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTag"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTag"];
                "multipart/form-data": components["schemas"]["PatchedTag"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
        };
    };
    notifications_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationList"];
                };
            };
        };
    };
    notifications_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
                "application/x-www-form-urlencoded": components["schemas"]["Notification"];
                "multipart/form-data": components["schemas"]["Notification"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
                "application/x-www-form-urlencoded": components["schemas"]["Notification"];
                "multipart/form-data": components["schemas"]["Notification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notifications_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotification"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNotification"];
                "multipart/form-data": components["schemas"]["PatchedNotification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_mark_all_read_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notification"];
                "application/x-www-form-urlencoded": components["schemas"]["Notification"];
                "multipart/form-data": components["schemas"]["Notification"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notification"];
                };
            };
        };
    };
    notifications_reminders_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReminderList"];
                };
            };
        };
    };
    notifications_reminders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reminder"];
                "application/x-www-form-urlencoded": components["schemas"]["Reminder"];
                "multipart/form-data": components["schemas"]["Reminder"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"];
                };
            };
        };
    };
    notifications_reminders_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"];
                };
            };
        };
    };
    notifications_reminders_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Reminder"];
                "application/x-www-form-urlencoded": components["schemas"]["Reminder"];
                "multipart/form-data": components["schemas"]["Reminder"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"];
                };
            };
        };
    };
    notifications_reminders_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notifications_reminders_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedReminder"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedReminder"];
                "multipart/form-data": components["schemas"]["PatchedReminder"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reminder"];
                };
            };
        };
    };
    notifications_settings_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedNotificationSettingsList"];
                };
            };
        };
    };
    notifications_settings_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationSettings"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationSettings"];
                "multipart/form-data": components["schemas"]["NotificationSettings"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettings"];
                };
            };
        };
    };
    notifications_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettings"];
                };
            };
        };
    };
    notifications_settings_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationSettings"];
                "application/x-www-form-urlencoded": components["schemas"]["NotificationSettings"];
                "multipart/form-data": components["schemas"]["NotificationSettings"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettings"];
                };
            };
        };
    };
    notifications_settings_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    notifications_settings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedNotificationSettings"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedNotificationSettings"];
                "multipart/form-data": components["schemas"]["PatchedNotificationSettings"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettings"];
                };
            };
        };
    };
    search_autocomplete_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_global_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_history_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSearchHistoryList"];
                };
            };
        };
    };
    search_history_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchHistory"];
                "application/x-www-form-urlencoded": components["schemas"]["SearchHistory"];
                "multipart/form-data": components["schemas"]["SearchHistory"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchHistory"];
                };
            };
        };
    };
    search_history_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchHistory"];
                };
            };
        };
    };
    search_history_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchHistory"];
                "application/x-www-form-urlencoded": components["schemas"]["SearchHistory"];
                "multipart/form-data": components["schemas"]["SearchHistory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchHistory"];
                };
            };
        };
    };
    search_history_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_history_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSearchHistory"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSearchHistory"];
                "multipart/form-data": components["schemas"]["PatchedSearchHistory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchHistory"];
                };
            };
        };
    };
    search_history_clear_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_saved_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSavedSearchList"];
                };
            };
        };
    };
    search_saved_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedSearch"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedSearch"];
                "multipart/form-data": components["schemas"]["SavedSearch"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedSearch"];
                };
            };
        };
    };
    search_saved_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedSearch"];
                };
            };
        };
    };
    search_saved_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedSearch"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedSearch"];
                "multipart/form-data": components["schemas"]["SavedSearch"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedSearch"];
                };
            };
        };
    };
    search_saved_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_saved_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSavedSearch"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSavedSearch"];
                "multipart/form-data": components["schemas"]["PatchedSavedSearch"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedSearch"];
                };
            };
        };
    };
    search_saved_execute_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedSearch"];
                "application/x-www-form-urlencoded": components["schemas"]["SavedSearch"];
                "multipart/form-data": components["schemas"]["SavedSearch"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedSearch"];
                };
            };
        };
    };
    search_search_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    search_workspace_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    taskboards_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTaskBoardList"];
                };
            };
        };
    };
    taskboards_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskBoard"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskBoard"];
                "multipart/form-data": components["schemas"]["TaskBoard"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskBoard"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskBoard"];
                "multipart/form-data": components["schemas"]["TaskBoard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    taskboards_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTaskBoard"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTaskBoard"];
                "multipart/form-data": components["schemas"]["PatchedTaskBoard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_columns_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_columns_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskBoard"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskBoard"];
                "multipart/form-data": components["schemas"]["TaskBoard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    taskboards_tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskBoard"];
                "application/x-www-form-urlencoded": components["schemas"]["TaskBoard"];
                "multipart/form-data": components["schemas"]["TaskBoard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskBoard"];
                };
            };
        };
    };
    tasks_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTaskList"];
                };
            };
        };
    };
    tasks_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Task"];
                "application/x-www-form-urlencoded": components["schemas"]["Task"];
                "multipart/form-data": components["schemas"]["Task"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Task"];
                "application/x-www-form-urlencoded": components["schemas"]["Task"];
                "multipart/form-data": components["schemas"]["Task"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tasks_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTask"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTask"];
                "multipart/form-data": components["schemas"]["PatchedTask"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_activity_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_comments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_comments_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Task"];
                "application/x-www-form-urlencoded": components["schemas"]["Task"];
                "multipart/form-data": components["schemas"]["Task"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    tasks_move_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTask"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTask"];
                "multipart/form-data": components["schemas"]["PatchedTask"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Task"];
                };
            };
        };
    };
    workspaces_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedWorkspaceList"];
                };
            };
        };
    };
    workspaces_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workspace"];
                "application/x-www-form-urlencoded": components["schemas"]["Workspace"];
                "multipart/form-data": components["schemas"]["Workspace"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetail"];
                };
            };
        };
    };
    workspaces_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workspace"];
                "application/x-www-form-urlencoded": components["schemas"]["Workspace"];
                "multipart/form-data": components["schemas"]["Workspace"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkspace"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkspace"];
                "multipart/form-data": components["schemas"]["PatchedWorkspace"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_database_stats_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_invite_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Workspace"];
                "application/x-www-form-urlencoded": components["schemas"]["Workspace"];
                "multipart/form-data": components["schemas"]["Workspace"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_members_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_members_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_members_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkspace"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkspace"];
                "multipart/form-data": components["schemas"]["PatchedWorkspace"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_members_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_members_me_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_task_stats_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_workspace_settings_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_workspace_settings_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedWorkspace"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedWorkspace"];
                "multipart/form-data": components["schemas"]["PatchedWorkspace"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Workspace"];
                };
            };
        };
    };
    workspaces_analytics_overview_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_invitations_accept_create_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_invitations_decline_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_invitations_accept_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workspaces_invitations_pending_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
